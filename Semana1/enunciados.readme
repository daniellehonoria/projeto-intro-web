-------------------------------------------------------SEMANA 1--------------------------------------------------------------------------------------
*1. Para o item que voc√™ decidiu, pense nas caracter√≠sticas que s√£o importantes para constru√≠-lo. 
Vamos usar estas caracter√≠sticas para definir exemplos destes objetos usando o c√≥digo.
Voc√™ precisar√° criar pelo menos=  * uma caracter√≠stica String;   * uma caracter√≠stica Number;   * uma caracter√≠stica Boolean;

2. Agora, crie tr√™s conjuntos de vari√°veis utilizando as caracter√≠sticas que voc√™ definiu acima. 
Lembre-se que deve ser o mesmo tipo de item, com tr√™s conjuntos de dados diferentes.


 Fa√ßa um c√°lculo de m√©dia, entre os valores num√©ricos respectivos de cada item. Imprima o valor da m√©dia utilizando um console.log. 
 Guarde este valor em uma const;
üí°A m√©dia deve ser igual √† soma dos itens, dividida pelo total de itens.

const mediaAnosAbrigo : (anosAbrigo1 + anosAbrigo2 + anosAbrigo3 + anosAbrigo4 + anosAbrigo5 + anosAbrigo6)/6
console.log("A m√©dia de tempo em que os cachorros est√£o no abrigo √© de " + mediaAnosAbrigo + " anos.")

//4. Com um console.log, imprima o resultado de uma opera√ß√£o l√≥gica que checa se todos os valores de vari√°veis booleanas criadas at√© aqui s√£o verdadeiras.
const castrados  : castrado1 && castrado2 && castrado3 && castrado4 && castrado5 && castrado6
console.log(castrados)


6. Exiba um relat√≥rio utilizando console.log(), mostrando todos os dados de cada um dos itens criados at√© aqui
  1. O log deve exibir o dado de nome, t√≠tulo ou afim sempre em  RAS MAI√öSCULAS, como no exemplo abaixo.

  console.log(`Nome: ${ nome1. toUpperCase()}, Idade: ${idade1}, Sexo: ${sexo1}, Porte: ${porte1}, Castrado: ${castrado1}, Tempo no abrigo: ${anosAbrigo1}, Pelagem: ${pelagem1}`)
  console.log(`Nome: ${ nome2. toUpperCase()}, Idade: ${idade2}, Sexo: ${sexo2}, Porte: ${porte2}, Castrado: ${castrado2}, Tempo no abrigo: ${anosAbrigo2}, Pelagem: ${pelagem2}`)
  console.log(`Nome: ${ nome3. toUpperCase()}, Idade: ${idade3}, Sexo: ${sexo3}, Porte: ${porte3}, Castrado: ${castrado3}, Tempo no abrigo: ${anosAbrigo3}, Pelagem: ${pelagem3}`)
  console.log(`Nome: ${ nome4. toUpperCase()}, Idade: ${idade4}, Sexo: ${sexo4}, Porte: ${porte4}, Castrado: ${castrado4}, Tempo no abrigo: ${anosAbrigo4}, Pelagem: ${pelagem4}`)
  console.log(`Nome: ${ nome5. toUpperCase()}, Idade: ${idade5}, Sexo: ${sexo5}, Porte: ${porte5}, Castrado: ${castrado5}, Tempo no abrigo: ${anosAbrigo5}, Pelagem: ${pelagem5}`)
  console.log(`Nome: ${ nome6. toUpperCase()}, Idade: ${idade6}, Sexo: ${sexo6}, Porte: ${porte6}, Castrado: ${castrado6}, Tempo no abrigo: ${anosAbrigo6}, Pelagem: ${pelagem6}`)


---------------------------------------------------------SEMANA 2 ------------------------------------------------------------------------------------

1. Transforme os itens que criamos nas √∫ltimas semanas em objetos.
Exemplo
//ANTES
  const nome1 = "Fulano";
  const idade1 = 33;
  const verificouEmail1 = false; 
//DEPOIS
objeto1 = { 
    nome: "Fulano", 
    idade: 33,
    verificouEmail: false
  } 
2. Crie um array para guardar os objetos. Este array deve estar vazio, 
por enquanto;
3. Adicione os objetos criados no item 1 ao array de objetos criado no 
item 2, utilizando o push() Ao fim, voc√™ deve ter algo parecido com isso:
[
  { 
    nome: "Fulano", 
    idade: 33,
    verificouEmail: false
  },
  { 
    nome: "Beltrano", 
    idade: 41,
    verificouEmail: true
  },
  { 
    nome: "Fulano", 
    idade: 27,
    verificouEmail: true
  },
4. Altere o item ‚ÄúAdicione os novos objetos no array de objetos, 
utilizando o push()‚Äù (item 3), para criar uma verifica√ß√£o antes de 
dar o push. A carater√≠stica booleana do objeto deve ser validada. Isto √©, o objeto s√≥ deve ser adicionado ao array se a propriedade booleana for true;
5. Crie uma condi√ß√£o else, que, em caso de valor false na condi√ß√£o acima, exiba um **ALERT** avisando para o usu√°rio que o item n√£o foi adicionado, e 
n√£o fa√ßa o push

---------------------------------------------------------SEMANA 3------------------------------------------------------------------------------------

1.Reescrevendo o relat√≥rio criado utilizando console.log() que come√ßamos na semana 2, altere a forma que a caracter√≠stica de array dos 
itens seja escrita como um la√ßo que guarde todos os valores da propriedade array do objeto em uma mesma string. Utilize esta string no relat√≥rio.
üí° Chamamos este processo de reescrever um c√≥digo j√° escrito, de refatora√ß√£o.
Exemplo:
//ANTES 
FULANO
idade: 33
verificou email?: false
projetos: ["Projeto de HTML", "Projeto de CSS", "Projeto React"] 

//DEPOIS
FULANO
idade: 33
verificou email?: false
projetos: "Projeto de HTML,Projeto de CSS,Projeto React" 

2. Ainda no relat√≥rio, altere-o para que ele seja criado utilizando um la√ßo. Ou seja, voc√™ n√£o deve mais imprimir individualmente cada item do relat√≥rio. 
Cada item deve ser exibido a partir de uma itera√ß√£o do la√ßo. Para testar, adicione mais um item ao array de objetos, e verifique se ele √© exibido corretamente.
//ANTES 
console.log(elementos[0].item);

//DEPOIS
FULANO
for(elemento in elementos){
  console.log(elemento.item);
}
3. Crie uma fun√ß√£o que receba como par√¢metro um objeto, e devolva a string do relat√≥rio com os dados do objeto.
4. Crie uma fun√ß√£o que recebe um array de objetos e uma string. Esta fun√ß√£o deve retornar um objeto, e o objeto retornado deve possuir apenas os 
itens que tenham o nome/t√≠tulo igual √† string passada como par√¢metro. Caso n√£o exista um item, exiba um ALERT indicando que nenhum item foi encontrado.

---------------------------------------------------------SEMANA 4-----------------------------------------------------------------------------------
1. Crie uma p√°gina HTML, e nesta p√°gina, d√™ um t√≠tulo para sua lista de itens;
2. Crie um cabe√ßalho, uma se√ß√£o principal, e um footer para a p√°gina;
3. Na se√ß√£o principal. Crie duas divis√µes. Uma deve possuir um input e um bot√£o. A outra, deve possuir sections 
para criar os itens da lista;
4. Crie uma section para cada item da lista;
5. Para cada um dos tr√™s itens criados deve possuir todas as informa√ß√µes do array de objetos. As informa√ß√µes devem estar elencadas 
como lista n√£o ordenada.     Esta tela n√£o precisa interagir com o JavaScript, tendo seus dados escritos diretamente nos elementos.
6. Transforme o nome/t√≠tulo do item em um link para um artigo sobre este item (pode ser do google, de algum blog ou da Wikip√©dia)
üí° Recomendamos adicionar imagens a seus itens agora. Ao fazer isso, lembre-se de criar mais uma propriedade String nos seus objetos, 
  para guardar o caminho do link at√© a imagem.
A partir do nosso exemplo de estiliza√ß√£o, crie a identidade da sua p√°gina seguindo os passos abaixo:
1. Estilize o cabe√ßalho da sua p√°gina com o mesmo t√≠tulo que est√° no <title>;
2. Estilize o rodap√© para sua p√°gina, e nele, coloque suas informa√ß√µes de contato (nome e github);
3. Estilize a lista criada na semana passada, seguindo o padr√£o enviado;

---------------------------------------------------------SEMANA 5-----------------------------------------------------------------------------------
1. Transforme os elementos da lista de itens em Flexbox;
OU
1. Transforme o container da tela toda em Flexbox;
Depois disso:
1. Transforme os elementos da lista de itens em Grid;
2. Fa√ßa com que a p√°gina se torne responsiva, exibindo corretamente as informa√ß√µes em desktop e m√≥vel;
OU
1. Transforme o container da tela toda em Grid;
2. Fa√ßa com que a p√°gina se torne responsiva, exibindo corretamente as informa√ß√µes em desktop e m√≥vel;

---------------------------------------------------------SEMANA 6-----------------------------------------------------------------------------------
1. Altere seu c√≥digo para que a tela de lista de itens crie os elementos da lista atrav√©s de manipula√ß√£o do DOM.
Atualmente, seus elementos est√£o criados no HTML e no CSS de forma est√°tica, sem que exista intera√ß√£o entre HTML e CSS e o Script que criamos. 
A ideia √© que agora, os dados que comp√µem os elementos HTML devem ser criados a partir do nosso c√≥digo JS. Para isso, devemos manipular 
os objetos do HTML e do CSS utilizando o DOM.

---------------------------------------------------------SEMANA 7-----------------------------------------------------------------------------------
1. Utilize a fun√ß√£o de busca criada no item 2 da semana 6 para fazer com que ao digitar um campo no input e apertar o bot√£o, apenas os itens 
com nome igual ao da busca sejam renderizados na tela.
